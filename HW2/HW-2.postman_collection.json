{
	"info": {
		"_postman_id": "d4c088ea-06ec-473a-8e2c-21e8bcc34b6c",
		"name": "HW-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28326942"
	},
	"item": [
		{
			"name": "01-first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5006/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "02-user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request variables",
							"var req_body = request.data;",
							"var req_name = req_body.name;",
							"var req_age = req_body.age;",
							"var req_salary = req_body.salary;",
							"",
							"// Responce variables ",
							"var jsonData = pm.response.json();",
							"var resp_u_name = jsonData.name;",
							"var resp_u_age = jsonData.age;",
							"var resp_u_salary = jsonData.salary;",
							"var resp_u_family = jsonData.family;",
							"var resp_u_salary_1_5_year = jsonData.salary_1_5_year;",
							"",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"console.log(\"resp_u_name == \" + resp_u_name, typeof resp_u_name)",
							"",
							"pm.test(\"Check user name == \" + resp_u_name, function () {",
							"    pm.expect(resp_u_name).to.eql(\"Andrew\");",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"console.log(\"resp_u_age == \" + resp_u_age, typeof resp_u_age)",
							"",
							"pm.test(\"Check user name == \" + resp_u_age, function () {",
							"    pm.expect(resp_u_age).to.eql(\"25\");",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"console.log(\"resp_u_salary == \" + resp_u_salary, typeof resp_u_salary)",
							"",
							"pm.test(\"Check user name == \" + resp_u_salary, function () {",
							"    pm.expect(resp_u_salary).to.eql(1000);",
							"});",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Check request/response user name == \" + req_name, function () {",
							"   pm.expect(resp_u_name).to.eql(Number(req_name));",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"// Вывести в консоль параметр family из response.",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"    "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "03-object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"// Переменные RESPONSE\r",
							"const jsonData = pm.response.json();\r",
							"const resp_family = jsonData.family\r",
							"const resp_pets = jsonData.family.pets\r",
							"// Переменные REQUEST\r",
							"const req_data = pm.request.url.query;\r",
							"const req_name = req_data.get(\"name\");\r",
							"const req_age = req_data.get(\"age\");\r",
							"const req_salary = req_data.get(\"salary\");\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name request/response\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"console.log(\"req_name = \" +req_name);\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age request/response\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"console.log(\"req_age = \" +req_age);\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary request/response\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req_salary);\r",
							"});\r",
							"console.log(\"req_salary = \" +req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family = \", jsonData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Pet has name\", function () {\r",
							"    pm.expect(resp_pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Pet has age\", function () {\r",
							"    pm.expect(resp_pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name has value 'Luky'\", function () {\r",
							"    pm.expect(resp_pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age is 4\", function () {\r",
							"    pm.expect(resp_pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/object_info_3?name=Andrew&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrew"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "04-object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const req_data = pm.request.url.query;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response/request are equal\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_data.get(\"name\"));\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age response/request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req_data.get(\"age\"));\r",
							"})\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"'salary' in request = \", req_data.get(\"salary\"));\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"console.log(\"'salary' in response = \", jsonData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"'salary' 0 element = \", jsonData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"'salary' 1st element = \", jsonData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"'salary' 2nd element = \", jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0 element to equal salary in request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req_data.get(\"salary\"))\r",
							"})\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1st element to equal salary in request*2\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+req_data.get(\"salary\")*2)\r",
							"})\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2nd element to equal salary in request*3\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+req_data.get(\"salary\")*3)\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let x = 0; x <= 2; x++) {\r",
							"    console.log(\"Salary = \", jsonData.salary[x])\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/object_info_4?name=Andrew&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrew"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "05-user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2",
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code check 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"// 7. Спарсить request.",
							"var req_body = request.data;",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Response has param start_qa_salary\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Response has param qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Response has param qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Response has param qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Response has param qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Response has param person\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Check start_qa_salary == req_body.salary\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req_body.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_6_months == req_body.salary * 2\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req_body.salary * 2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_12_months == req_body.salary * 2.7\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req_body.salary * 2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_1.5_year == req_body.salary * 3.3\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req_body.salary * 3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_3.5_years == req_body.salary * 3.8\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req_body.salary * 3.8);",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check u_name[0] == salary\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req_body.salary);",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check u_age == age\", function () {",
							"    pm.expect(jsonData.person.u_age).to.eql(+req_body.age);",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Check u_salary_5_years == req_body.salary * 4.2\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req_body.salary * 4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (const key in jsonData.person) {",
							"    console.log(`${key}: ${jsonData.person[key]}`);",
							"};",
							"",
							"// Just to remember syntax: ",
							"// for (let x = 0; x <= jsonData.person.u_name.length - 1; x++) {",
							"//     console.log(`Person list ${jsonData.person.u_name[x]}`);",
							"// };",
							"// // v2",
							"// jsonData.person.u_name.forEach(element => console.log(element));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}